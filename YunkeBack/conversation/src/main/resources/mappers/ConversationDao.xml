<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 写接口的全限定名 -->
<mapper namespace="com.titos.conversation.dao.ConversationDao">
    <!-- id写接口里面的方法 ，返回类型是类-->
    <select id="selectAllDialog" resultType="com.titos.conversation.po.MessagePO">
        select id,
               send_id as sendId,
               receive_id as receiveId,
               content,
               image_addr as imageAddr,
               release_time as releaseTime,
               is_complete as isComplete
        from message
        where (send_id = #{id} and receive_id = #{otherId})
           or (send_id = #{otherId} and receive_id = #{id})
    </select>

    <delete id="deleteDialog">
        delete from message
        where (send_id = #{id} and receive_id = #{otherId})
           or (send_id = #{otherId} and receive_id = #{id})
    </delete>

    <insert id="insertDialog" parameterType="com.titos.conversation.po.MessagePO" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into message(send_id, receive_id, content, image_addr, release_time, is_complete)
        values(#{sendId}, #{receiveId}, #{content}, #{imageAddr}, #{releaseTime}, #{isComplete})
    </insert>

    <insert id="insertFriend">
        insert into contactperson(user_id, friend_id)
        values(#{id}, #{otherId})
    </insert>

    <delete id="deleteFriend">
        delete from contactperson
        where  (user_id = #{id} and friend_id = #{otherId})
           or (friend_id = #{id} and user_id = #{otherId})
    </delete>

    <select id="selectAllDialogReceiveNotComplete" resultType="com.titos.conversation.po.MessagePO">
        select id,
               send_id as sendId,
               receive_id as receiveId,
               content,
               image_addr as imageAddr,
               release_time as releaseTime,
               is_complete as isComplete
        from message
        where send_id = #{id} and receive_id = #{otherId} and is_complete = 0
        order by release_time
    </select>

    <update id="updateComplete">
        update message set is_complete = 1
        where (send_id = #{otherId} and receive_id = #{id} and is_complete = 0)
    </update>

    <select id="selectFriend" resultType="int">
        select count(*) from contactperson
        where (user_id = #{id} and friend_id = #{otherId})
            or (friend_id = #{id} and user_id = #{otherId})
    </select>

    <update id="updateFriend">
        update contactperson set message_id = #{maxId}
        where (user_id = #{id} and friend_id = #{otherId})
           or (friend_id = #{id} and user_id = #{otherId})
    </update>

    <select id="selectSimpleInformation" resultType="com.titos.conversation.vo.SimpleInformationVO">
        select user.username as userName,
               user.head_image as headImage,
               message.content as content,
               message.release_time as sendTime,
               a.uid as friendId,
               b.notReadNum as notReadNum
        from
            (select friend_id as uid, message_id from contactperson where user_id = #{id}
             union select user_id as uid, message_id from contactperson where friend_id = #{id}) as a
                left join message on a.message_id = message.id
                left join user on user.id = a.uid
                left join ( select send_id as uid, count(*) as notReadNum from message
                            where send_id in
                                  ( select friend_id as uid from contactperson where user_id = #{id}
                                    union select user_id as uid from contactperson where friend_id = #{id} )
                              and receive_id = #{id} and is_complete = 0 group by send_id) as b
                          on b.uid = a.uid;
    </select>

    <update id="updateCompleteByChange">
        update message set is_complete = 0
        where (send_id = #{otherId} and receive_id = #{id} and release_time = #{time})
    </update>

</mapper>