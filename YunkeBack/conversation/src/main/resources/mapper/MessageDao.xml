<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 写接口的全限定名 -->
<mapper namespace="com.titos.conversation.dao.MessageDao">
    <resultMap id="BaseResult" type="com.titos.conversation.model.Message">
        <id column="id" property="id" jdbcType="NUMERIC"/>
        <result column="send_id" property="sendId" jdbcType="INTEGER"/>
        <result column="receive_id" property="receiveId" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="image_addr" property="imageAddr" jdbcType="VARCHAR"/>
        <result column="release_time" property="releaseTime" jdbcType="TIMESTAMP"/>
        <result column="is_complete" property="isComplete" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, send_id, receive_id, content, image_addr, release_time, is_complete
    </sql>
    <!-- id写接口里面的方法 ，返回类型是类-->
    <select id="selectAllMessage" resultType="com.titos.conversation.model.Message">
        select id,
               send_id as sendId,
               receive_id as receiveId,
               content,
               image_addr as imageAddr,
               release_time as releaseTime,
               is_complete as isComplete
        from message
        where (send_id = #{sendId} and receive_id = #{receiveId})
           or (send_id = #{receiveId} and receive_id = #{sendId})
    </select>

    <delete id="deleteMessage">
        delete from message
        where (send_id = #{sendId} and receive_id = #{receiveId})
           or (send_id = #{receiveId} and receive_id = #{sendId})
    </delete>

    <insert id="insertMessage" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into message(send_id, receive_id, content, image_addr, release_time, is_complete)
        values(#{sendId}, #{receiveId}, #{content}, #{imageAddr}, #{releaseTime}, #{isComplete})
    </insert>

    <select id="selectNotReceiveMessage" resultMap="BaseResult">
        select id,
               send_id as sendId,
               receive_id as receiveId,
               content,
               image_addr as imageAddr,
               release_time as releaseTime,
               is_complete as isComplete
        from message
        where send_id = #{sendId} and receive_id = #{receiveId} and is_complete = 0
        order by release_time
    </select>

    <update id="updateComplete">
        update message set is_complete = 1
        where (send_id = #{sendId} and receive_id = #{receiveId} and is_complete = 0)
    </update>

    <select id="selectSimpleInformation" resultType="com.titos.conversation.vo.SimpleInformationVO">
        select user.username as userName,
               user.head_image as headImage,
               message.content as content,
               message.release_time as sendTime,
               a.uid as friendId,
               b.notReadNum as notReadNum
        from
            (select friend_id as uid, message_id from contactperson where user_id = #{id}
             union select user_id as uid, message_id from contactperson where friend_id = #{id}) as a
                left join message on a.message_id = message.id
                left join user on user.id = a.uid
                left join ( select send_id as uid, count(*) as notReadNum from message
                            where send_id in
                                  ( select friend_id as uid from contactperson where user_id = #{id}
                                    union select user_id as uid from contactperson where friend_id = #{id} )
                              and receive_id = #{id} and is_complete = 0 group by send_id) as b
                          on b.uid = a.uid;
    </select>
</mapper>